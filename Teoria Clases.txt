Clase 2

¿Que puede ir dentro de la cabecera del documento <head>? (2 hs a )

Etiquetas de Encabezado (2:13 hs a 2:18 hs)


**********************************************************


Clase 3

Etiquetas semanticas

Son etiquetas que dividen la estructura de la pagina web en partes.

Elementos dentro del body (27 min a 35 min)
	header
		Titulos, barras de navegacion
	main
		Tiene el contenido principal
	footer
		Es el pie de pagina

Correcto uso de Encabezados (1:10 hs a 1:13 hs)

Uso de Rutas Relativas y Absolutas (2:03 hs)
	Atributo href=""
	Atributo target="_blank"
		No lo utilizo con rutas RELATIVAS
		La usamos con ABSOLUTAS
	Atributo target="_parent"
	Atributo target="_self"
	Atributo target="_top"
		Lo ultimos 3 se comportan igual.

	Atributo title=""
		Atributo de accesibilidad para personas con discapacidad visual.
	
	

************************************************************

Clase 4

Arquitectura y estructura de nuestra pagina web
Entendiendo las partes principales
Estructuramos lo que esta adentro del body


Ruteo interno en Rutas Relativas (14 min )

Busquedas optimizadas de Google (20 min)
	¿Por que es importante utilizar etiquetas semanticas?
		Por que google rankea de esa manera las paginas para sus busquedas.

Etiquetas <section> y <article> (26 min a 35 min)
	Estan dentro de la etiqueta <main>
	section es un bloque en el cual yo divido la informacion en diferente grupos tematicos.
	articles son los temas principales de algun area, son las divisiones de la informacion dentro del section.


Rutas Relativas usando id (38 min)

Ejemplo Proyecto Final (1:19 hs 1:30 hs)

Agregar IMAGENES con etiqueta <figure> y <figcaption>(1:34 hs)
	<img src="" alt="">
		Atributo alt (texto alternativo) es obligatorio para mejorar la accesibilidad.

	<figcaption> una pequeña nota/comentario de la imagen que estamos viendo.

Manejo con carpeta ASSETS (1:53 hs)
	Los assets son el lugar donde guardo todos esos que nosostros en algun momento queremos mostrar.

Arquitectura
	la forma en que estructuro los directorios.


************************************************************

Clase 5

Repaso clase anterior (0 min a 20 min)

Listas Ordenadas (23 min & 51 min)

Etiquetas de BLOQUE y LINEA (32 min)

Etiqueta <address>
	Va en footer
	
	Bloque: ocupan el 100% del ancho del dispositivo en donde se esta mostrando la aplicacion.

Etiqueta <iframe> 
	Incrusto una ventana de otra pagina en nuestro sitio
	Lo usamos para mostrar mapas
	Esta gernealmente en el footer

Agrega mapa

Agregar video 

Agregar audio

Etiqueta correo electronico y telefono (2 hs)
	Se usa en el Footer generalmente
	Se usa con un ancla con atributo href="mailto:hola@udesa"
	Para telefono se usa ancla con atributo href="tel:"



************************************************************

Clase 6

Realización de examen Alumni (2:30 min)

Estilos con CSS (13 min)

	Tenemos 3 formas de trabajar con css
		Estilos en linea
		Estilos en bloque (23 min)
		Estilos en el head (34 min)
		Etilos Externos (38 min)

	
	Configuracion de usuario en Git bash (1:20 hs)
			Para que vscode reconozca quien soy.
	Un poco de Chrome Dev Tools (21 min)

	COMO CONFIGURAR PERFIL EN VSCODE PARA SIEMPRE TENER TUS EXTENSIONES (1:37 HS)
	Git lens en VSCODE (1:38 hs)
	Github pull Request
	Iniciar sesion en VSCODE


************************************************************

Clase 7


¿QUE ES EL ROOT ? (12 min)
	Es la raiz principal del proyecto o de la aplicacion.

Diferencias entre <strong> y <b> Accesibilidad (16 min)

Repositorio LOCAL GIT (40 min)

Repositorio REMOTO GitHUb (1:39 hs)

************************************************************

Clase 8

Continuamos con Git (24 min)

	git status
	git no guarda directorios vacios
	git remote -v
	git log


ID (1:07 hs)


CLASES (1:08:30 hs a 1:34 hs)


Concepto Caja (2:05 hs)
	Margin, border, padding 


************************************************************

Clase 9


Paleta de colores Adobe (10 min)

Formas de representar un color (26 min)
	Por rgb
	Por nombre
	Por Hexadecimal

Selectores anidados o Padres a hijos (45 min)

Tipografias (54 min)
	font-size (16px por default)
	font-family
		¿que pasa si el usuario no tiene estas tipografias en su computadora?
	Para no tener que depender del font-family podes:

	1° puedo descargar una tipografia y agregarla a mi proyecto (USO DE TIPOGRAFIA LOCAL)
	2° lINKEAR o importarla ()

1) como hago para configurar nuestra tipografia con el codigo descargado
	
	a)@font-face{ (configuro donde esta la fuente que descargue)
	b) creo la regla y le asigno le nombre de la fuente


2a) linkear de Google fonts en el html y en el css lo llamamos

2b) Importarlo directamente desde el css (1:49 hs)
	a) poner en el css el @import url('')

Se puede usar mezclado 1 y 2.


GIT - continuacion (2:00 hs)

.gitignore
	
	index.html
	.css
	/css o css/
	*.pdf -> no me subas todos los pdf


************************************************************

Clase 10



Para que sirven los DIV's ? (17 min)


Repaso Font-family descarga o linkeo (30 min)
	google Fonts


Concepto de Caja (54 min)

	Margin (1:00 hs) - separacion entre etiquetas
	Border (1:08 hs) - 
	Padding (1:16 hs) - es el relleno interno



Live Share (1:35 hs)
	Compartir Visual Studio Code (pair programming)
	Herramienta para trabajar en EQUIPO

	requerimientos:
	Estar logueado con usuario en github



Git - .gikeep (2:05 hs)


************************************************************

Clase 11


GIT (25:30 min)

	Agregar COLABORADORES dentro de nuestro Proyecto
		Esto lo hace el que tiene el repo principal:
		Settings -> Collaborators -> Add people

	git pull - busca su hay cambios en el repo remoto y si hay los descarga y me los guarda. Si el pull encuentra diferencias te deja decidir si hay cambios sobre una misma.
 
	A veces aunque hiciste git pull al inicio tenes que hacer de nuevo antes de git push luego de varias horas de codeo. 	

	git clone - es crear una copia exacta del repo remoto con logs y todo


Es recomendable trabajar con imagenes PNG y SVG (1:28 hs)
	Son los mas flexibles y ligeros

Ancla con imagen adentro (1:47 hs)

Background image (1:49 hs)

	
************************************************************

Clase 12


Sketch Web / wireframe (17 min)

	Sketch Es un pequeño diseño a mano alzada donde le muestro al cliente o el me pide como seria la pagina (es un borrador)

	
	Wireframe es algo digital


Herramientas de Diseño (24 min)

	Figma

	Balsamiq (25:30 min)

	invisionapp (28 min)

	Canva (29 min)


Examen 2 Alumni (36 min)


Subir ICONO a mi pestaña (47:30 min)

	Convertir de PNG a ICO en cualquier app online



	text-decoration: none

	Las imagenes vectoriales se acomodan mas facilmtente a los contenedores, no necesito usar muchas media querys



Formularios (1:13 hs)

	Atributo action - representa el archivo o el lugar a donde yo voy a estar enviando todos los datos que cargue dentro del formulario (para enviarlo en algun momento a una base de datos) 	

	Atribuo method - es la forma en la que se envia la informacion

	Metodo post - envio de datos a traves del http con navegadores o servidores. Va oculto a la vista del usuario.

	Metodo get - no es recomendado utilizarlo porque va a la vista del usuario.

	label (ELEMENTO DE LINEA) - etiqueta informativa sobre el campo a llenar por el usuario

		Atributo For va vinculada al id del input

	input (ELEMENTO DE LINEA) - es el unico lugar donde el usuario puede introducir dato en una pagina web.

		type="text"

		type="email"

		type="number"

	
	Atributo required - hago que un campo sea obligatorio de llenar.

	Atributo placeholder="juan perez" - es un ejemplo de un valor escrito dentro del atributo para el cliente.


	Button

		type="submit" - para que el boton haga algo le tengo que pedir que haga algo.

		type="reset" - borra los datos ingresados en los inputs que estan el formulario.

	
	Revision de los metodos HTTP (1:30 hs)


	Elemento select con atributo id vinculado con for de label (1:59 hs)

		elemento optgroup donde voy cargando los datos que quiero que se muestren



************************************************************

Clase 13


git clone (28 min)

GithubPages (41:30 min)

Es solo para Frontend

	Voy a Settings 
	Voy a Pages
	Deploy from a branch (seleccionamos la rama en la que hacemos deploy)
	en Branch elijo Master y doy a Save


000WebHost (1:20 hs - a:54 hs)

	Es un servidor profesional (parecido a Github pages) donde nosotros podemos ingresar y podemos manejar y administrar nuestro servidor.

	Solo sirve para Frontend para nosotros, porque maneja backend con PHP y nosotros vamos a utilizar backend con NODE JS para lo cual vamos a utilizar servidores AWS, Railway o algun otro que sirva con Node JS.

	000Webhost te da un hosting gratuito para un dominio por un año.


	iniciar sesion
	Elegir "Subir sitio"
	En "public_html" subo mis proyectos web
	Nunca borrar archivos en carpetas "public_html" y "tmp"

	Con este tema cerramos el modulo 4



	Intro JS (1:57 hs)

	// - Comentarios de una sola linea en JS 

	/* */ - Comentarios de varias lineas en JS

	Variables (2:03 hs)

		Es un espacio de memoria para almacenar datos.

		Como inicializamos una variable en JS:

			Con palabras reservadas:

				"var" nombre 



************************************************************

Clase 14

 
Continuacion JS

		Uso consola de Chrome (17 min)
			Variables

		Formas INCORRECTAS de nombrar una variable (30 min)

		VAR, LET y CONST (38:30 min)

		var se creo con JS

		let y const se creo con una actualizacion de JS

		CONST - se escriben en mayuscula (por ej. DNI)

		CONST - cuando la creamos tenemos que definirla  (const DNI = 92925103)

		VAR y LET - NO es obligatorio asignarles un valor(o inicializar) cuando la declaras.

		
		Tipos de Errores: 
			
					de Sintaxis 	
					de Compilacion ( salta cuando se ejecuta el codigo)
					Logicos (multiplicar un string con un numero)
						Los errores de compilacion/ejecucion y logicos se ven cuando se ejecuta el software.


		Concatenacion de Variables (nombre + apellido)


		Funciones por Defecto/nativas:

					console.log() - Imprime en la consola

		
		Isamiento de la variable (1:05 hs)

			Pasa con VAR
					 
					
	Vinculacion de archivo JS con HTML (1:11 hs)

	funcion alert()

	Operadores Matematicos (1:41:30 hs)



************************************************************

Clase 15


Instalación Node JS (10 min a 46 min)



Que es NPM (49 min)

	Es el Administrador de paquetes de Node.
	
	instala, actualiza o elimina herramientas que son as librerías al núcleo de NODE JS


	Que son las LIBRERIAS ? -> Son código JavaScript que tienen una tarea especifica que realizar.



Nodemon (56 min)

	Como instalo Nodemon: npm install -g nodemon

	Mantiene la ejecución del código abierta.

	Corto Nodemon:
		cierro la terminal
		Ctrl + C

	Nodemon solo funciona con codigo JS nativo, por ejemplo la funcion alert, prompt no funcionan porque es una funcion de ventana.

	SIEMPRE VA FUNCIONAR NODEMON CUANDO NO TENGAMOS QUE UTILIZAR FUNCIONES QUE NECESITAN VENTANAS DE NAVEGADOR.



Error Terminal PowerShell con Nodemon hecho con Willi (1:20 hs a 1:26 hs)

	Ejecutar Powershell como Administrador
	Ejecutar Policy para cambiar restringido a RemoteDesigned


Operadores (1:33:30 hs)

	Suma, resta,....
	modulo


PROMPT (1:40 hs)

	Es una funcion que permite que el usuario ingrese un valor


CONFIRM (1:54 hs)

	
************************************************************

Clase 16


Operadores Relacionales (36 min)

	>, <, ==, !=, >=, <=, ===

	=== (es identico en valor, tipo de dato, es un clon)



Condicionales (52 min)

	Son pequeñas estructuras de codigo que me dan la posibilidad de elegir cosas (if)

	NO ESTA CLASE: averiguar truthly / falsy 

	IF anidados (1:12:30 hs)

	IF anidados con operadores logicos (1:16 hs)

		&& || !


Uso de objeto window (1:54:30 hs)

	Imprimimos por consola el objeto window

	window es un objeto global, el objeto de la ventana, que tiene todos lo metodos, todos los datos del navegador, todos lo elementos html, todo css, todo js.

	window.location (traslada al usuario a algun otro lugar de mi aplicacion)


************************************************************

Clase 17

Examen Alumni (0 a 13 min)

Ramas en Git (18 min a )
		
	Una rama es una forma de tener diferentes versiones de mi proyecto guardados en un solo proyecto.

	git branch: me lista cuales son las ramas que tiene mi proyecto. Me muestra con un asterisco en que rama estoy parado.

	git branch nombreRama: crea una nueva rama.

	git checkout nombreRama: cambiar a otra rama.


	git merge nombreRamaOtraVersion: es una fusion, unir el proyecto a la rama principal.

		Yo necesito estar parado siempre en la rama a la que quiero aplicarle los cambios de otra rama.

	git push origin nombreRamaVersion: subo a git las otra rama.

	¿Se puede revertir la fusion?
		Si se puede, no dijo como.

	Conflictos al hacer fusion (1:18 hs)

	git remove || git reset || git revert

	git branch -D nombreRama: elimina una rama en la que no estoy parado.

	

	git log --oneline: me muestra los commits en una sola linea (resumida)


	git checkout hashCommit: vuelvo al estado anterior en ese hash commit (no crea rama, solo vuelvo para ver).

	git switch -c hashCommit: me lleva al estado de ese commit y me crea la rama.


Display (1:47:30 hs)

	Distribucion de elementos

	FLOAT



************************************************************

Clase 18


Nodemon es para backend, no funcionaria con el navegador.

Repaso Ramas (9 min a 15)



Eliminar una RAMA en el repositorio Remoto (16 min)
		
	Como hago para eliminar de Github la rama que ya habia eliminado de mi proyecto local.

		git push origin -d ramas



Display inline & float (36 min a 57 min)
	
	Display: inline & float: left (42 min)


Display FLEX (1:05 hs)

	display: flex;

	flex-direction: column;


flex-wrap (1:19 hs a 1:39 hs)

	Esto va con flex-direction: row;

	Flex por default esta en nowrap que no hace un salto de linea cuando llega al final.

	flex-wrap: wrap, habilita el salto de linea cuando termina la ventana.

	No hace falta usar flex-wrap:wrap con column porque por definicion ya tiene salto de linea column.

	Chrome devTools jugar con flex (1:30 hs)

		La herramienta del navegador me permite jugar con esas propiedades para ver como quedaria mi diseño con flex, para luego copiar a mi codigo en vscode las propiedades que me gustaron.

	
************************************************************

Clase 19


	Continuamos con Flex (40 min)

		Flex sobre ul 


	Tablas (1:32:30 hs)

		Una tabla es un pequeño cuadro para mostrar informacion, que puede venir de una base de datos.

		th: celdas titulos
		tr: fila 
		td: columna
	

	





************************************************************

Clase 20


Reset de CSS (12 min)

	Con el selector global * quito alguno de los estilos por default a todos los elementos .

	margin:0;
	padding: 0;
	box-sizing: border-box;

	Esto es lo minimo que podemos resetear.


CSS Normalize.css (25 min)


box-sizing: border-box  (26:30 min)

	Lo que hace es eliminar los padding - margin que vienen por default.

	Osea le estoy diciendo: Quiero que me midas desde el inicio de la caja hasta el final de la caja, no solo el contenido.



Bucles JS (35 min)

	un bucle es un ciclo que repite un estructura de codigo.


	
	Array / arreglo / vector (45 min)

			Estructura de un arreglo: let alumnos = [];

			Tiene un index o indice ue arranca desde cero.



	FOR (38 min)

		Funcion length (57 min)

	

	Funciones por defecto en Arreglos (1:34 hs)

	length: me da la longitud del array

	push: agregar elementos al final del Array




Objeto literal de JS (1:55:50 hs )

	Se accede por propiedad: nombreArreglo.propiedad




************************************************************

Clase 21


Explicacion Integrador 1 (5 min a 49 min)


JS no es un lenguaje orientado a objetos POO (1:00 hs)

	Breve explicacion de Clases en JS ()

		Se puede trabajar con clases en JS, pero generalmente NO SE HACE, porque si se quiere utilizar un lenguaje orientado a objetos
		para eso esta Java, PHP, C y TS por ejemplo. 

		


Objeto literal 

	Es la sintesis de un objeto de tipo clase.

	Es un objeto de forma sencilla que no dependa de una clase.



JSON - Objetos con notacion de JS (1:14 hs)

	Se utiliza para el paso de información de aplicacion a aplicacion.

	En JSON todo tiene que estar en tipo de dato string.



Intro a BOOTSTRAP (1:35 hs)

	Podemos utilizarlo via CDN y descargarlo en formato bundleado / minimizado y utilizarlo o descargar el codigo fuente para poder personalizarlo.

	Osea si queres personalizar, modificar algunos comportamientos por default hay que descargar el codigo fuente.

	


************************************************************

Clase 22


Descarga codigo bundleado Boostrap (26 min)

	Si descargo el bundleado de css y js de Bootstrap y tenemos que linkearlo desde el html, no tengo qu tener linkeado el CDN.

	Aca puedo modificar Bootstrap pero no engo acceso a todo.

	Para tener acceso a modificar todo el codigo fuente tengo que descargar el fuente que esta hecho con SASS.


Funciones ()

	Es una estructura de codigo que ejecuta una tarea especifica y puede ser reutilizada en diferentes partes del codigo.

	Funcion sin parametros y o argumentos (info que necesita la funcion para realizar la tarea)

	Funcion con parametros


Variables LOCALES (1:38 hs)

	Son las variables que viven dentro de una funcion y no pueden ser accedidos desde fuera de la funcion.


Variables GLOBALES (1:44:30 hs)

	Se recomienda crearlas al inicio de todo, porque son las que vamos a utilizar en cualquier parte de nuestro codigo.


QUE ES NAN ? (1:49:30 hs)

	Significa Not a Number, que significa que en algun lugar falto informacion o estamos queriendo un numero y me dieron un string.


QUE ES NULL ? (1:52 hs)

	Significa que antes habia algo pero ahora no hay nada.



ARROW FUNCTION - funcion flecha (1.58 hs)

	Se declaran como una CONST: Como las funciones son una estructura de codigo que no vamos a cambiar, entonces se declaran como una CONST.

	Salio en la version ECS 6.



************************************************************

Clase 23


	Watch incluido en Node (8 min)

		Nodemon ya viene incluido en Node desde la version 20, como "--watch"

		Tambien se puede ejecutar Typescript con Node.



	Repaso Variables Locales y Globales



	Funciones que retornan valores (37 min)



	Funciones CALLBACKS (59 min)

		Son funciones que reciben como parametro funciones.


	
	Eventos (1:01 hs)

		Utilizando un atributo de JS dentro de HTML (1:19:30 hs)

			El atributo onclick invoca a un elemento de javascript en nuestro a una funcion.


	Transformar un string a int (2:01 hs)

		con funcion parseInt()

		

************************************************************

Clase 25


	Funcion ANONIMA (51 min)

		Es una arrow Function sin nombre, se ejecuta automaticamente en el lugar en la que estan escritas.


	Validaciones en JS con IF(1:03 hs)



	Expresiones Regulares / REGEX (1:15 hs)

		Son algunas caracteristicas donde yo voy a trabajr con patrones.


	Que es el typeOf (1:22 hs)

		Puedo utilizarlo en condiciones: if (variable == typeOf Number)

	
	Objeto Math (1:47 hs)

		Sirve para calculos avanzados

		Es una clase estatica que se puede utilizar sin instanciarlo.

		Metodo random(): me da numeros random de entre en 0 y 1, si lo multiplico por 100 me danuemeros mayores

		Metodo round(): Me redondea al numero entero mas cercano, sacandome lo decimales.

		ejemplo de uso:

						Math.round(	Math.random() * 100)

						
									
************************************************************

Clase 26	


	Ejemplo de validación nativa de JS (20 min)

	
	DOM - getElementById (43 min) 

		Es la capacidad de Javascript de manipular todo lo que tiene el index.html

		con getElementById 

		Para que a traves de document tenga acceso a html TENGO QUE VINCULAR EL TAG SCRIPT EN la pagina html.

	
	AuthO (1:38 hs)

		Es un servicio de autenticacion pago

	
	Hacer Login con manipulacion de DOM (2:00 hs)



************************************************************

Clase 27


Atributo Method en Form (31 min)

	Me dice como voy a enviar los datos a traves del formulario.


Atributo action del Form (32 min)

	Es el archivo del Backend que va a recibir los datos del formulario para despues enviarlo a la base de datos.


Protocolo HTTP (38 min)

	Es un protocolo de transmision de informacion que tiene diferentes verbos osea diferentes formas.

	Una de las formas de la comunicacion de HTTP es el verbo GET.



Evento addeventlistener (1:18 hs)

	Usamos el evento e (1:25 hs)

		Accedemos a los valores de los inputs a traves del objeto global document
			email = document.getElementById("email").value

		Accedemos a los valores de los inputs a traves del evento "e"
			Usamos target.email.value 



Input checkbox valor value (1:40 hs)

	Se pueden seleccionar mas de uno a la ves.

	En los checkbox tengo que ponerle el atributo value para que no me devuelva solo on. Dato importante para la hora de obtener datos del input checkbox.

	Si quiero saber si lo marco o no lo marco entonces utilizo el atributo checked que me devuelve un booleano.
	
	
Input radio (2:00 hs)

	radiogroup, usamos el value



************************************************************

Clase 28


	Ejemplo de Modo Oscuro con JS (25 min a 48 min)


	Mostrar contraseña en input con JS (1:01 hs a 1:40 hs)

		Bajo el icono del ojito pero no pudo meterlo al input de contraseña, porque dijo que habia que hacerlo con css y estaba trabajando con HTML y JS.

	Input tipo hidden (1:40 hs a 1:51 hs)

			Sirve para indicar que cliente es por un id de cliente por ejemplo y luego conesto puedo obtener data como quien es el cliente, cuantos productos esta comprando algo que no se vea.


	Input tipo file (1:53 hs)

	
	Input tipo rango (1:58 hs)


	Input tipo date | datetime(2:02 hs)


	Objeto Date() (2:04 hs)

		let dia = new Date()


	textarea (2:14 hs)	

************************************************************

Clase 29


Configuracion de Entorno de Proyecto en NODE (16 min a 1:32 hs)

		Instalar Node
		
		npm init | npm init -y (32 min)

			Me sirve para inicializar un proyecto, para crear un ARCHIVO DE CONFIGURACION del proyecto.
				Me especifica:
								Cual va ser la version de este archivo
								Si tenes alguna palabra clave
								El archivo principal cual sera.
								La forma en que se va a ejecutar el archivo/aplicacion(scripts)

			Desde el archivo que me genera (package.json) yo puedo crear una aplicacion de React, Angular, View, de backend, puedo trabajar con Typescript con angular.

			
		Como cargar/importar un modulo nativo de Node (1:11 hs)

			const nombre = require('os');


		Como ejecuar un archivo desde scripts en package.json (1:23 hs)

			npm run iniciar


		
SASS (1:33 hs)

	npm install node-sass 

		¿por que no uso el flag "-g" de global?
			Por que no quiero que Node-sass este habilitado en todos los otros proyectos queno los estoy utilizando.

	No guardar la carpeta node_modules

	¿ Que es SASS o SCSS ?

		Es un preprocesador de CSS 

	¿Que hacen los scripts que paso Berni a poner en package.json? (1:56 hs)

		"build-css": "node-sass --include-path scss scss/index.scss css/index.css",
		"convertir": "nodemon -e scss -x \"npm run build-css\""

		Con el build llamamos a la libreria (node-sass) para que convierta de un tipo de archivo a otro tipo de archivo, "convertir" lo que hace es ejecutar Nodemon y ejecuta a la funcion Build.



************************************************************

Clase 30


	Repaso Node-Sass (0 a 40 min)

	
	¿Que es el package-lock.json? (43 min)
		Es un auditor del package.json

	SASS (53 min)

		Es un administrador de planillas css, la idea es que finalmente utilice una sola planilla index.css en donde se traspila todo lo que hacemos en SASS, de manera que solo voy a tocar el SASS y el index.css ya no lo toco.

		Puedo crear variables (54 min)

		Reinstalar Node Modules (1:10 hs)

			npm install : lo que hace es busca el package.json, lo lee e instala las dependencias necesarias.

		Anidamiento de estilos (1:19 hs)
			
		Mixin (1:31 hs)

			Son Bloques de codigo reutilizable, ejemplo:

				@mixin centrar{
					display: flex;
					justify-content: center;
					align-items: center;
				}

				Luego tengo que invocarlo con:

				div{
					@include centrar;
				}


		Separar por responsabilidades e IMPORTAR (1:40 hs a 1:48 hs)
			
			Poner _ a los archivos, por ejemplo:

						_variables.scss
						_mixins.scss
						_anidar.scss

			Porque es un archivo secundario que yo en algun momento voy a importarlo desde el index.scss.


************************************************************

Clase 31


	Nomenclatura BEM Bootstrap (31 min)

		Es un patron de diseño para la nomenclatura de las clases en CSS y la utiliza mucho Bootstrap.

		Me sirve para que no coincidan o no se dupliquen los nombres de clases en cuanto a estilos.

		BLOQUE ELEMENTO MODIFICADOR: .d-print-inline


	Media Querys (53 min a )

		Los breakpoints son los puntos de quiebre que tienen la mayoria de los dispositivos.


		Creo Puntos de Quiebre (1 hs)

			@content (1:12 hs)

				Significa que cualquier contenido que este dentro de ese mixin agregale esta caracteristica especifica.


		Herencia en SASS (1:33 hs)

			Usamos la palabra reservada % para crearlas

			Para usarla usamos @extend %align-center 

		

		Z-INDEX (1:45 hs)

		
					
		
************************************************************

Clase 33

	Backend

		Vamos a usar el backend para que le diga a mi html mostrate esto cuando el cliente haga esto, mostrate lo otro cuando el cliente haga esto.



	Seguimos con proyecto ejemplo con pagina Productos (10 min) 

	
	Intro a HTTP (21:30 min)

		Vamos a hacer un pequeño archivo que va administrar desde el backend el Front, que va administrar las respuestas que el cliente va a solicitar.


	Como funcionan las aplicaciones (45 min)

		Las aplicaciones funcionan con un software (servidor) que recibe peticiones y da la respuesta:

			const http = require('http');

			const servidor = http.createServer((peticion, respuesta) => {

			});

			Creamos un software que maneje la peticion y la respuesta y dentro esta todo el codigo que quiero que realize el backend de mi aplicacion. Este servidor es el que va administrar la peticion y la respuesta de mi servidor.

		Levantamos el Servidor | Ponemos en linea el servidor

			servidor.listen(3000, ()=>{
				console.log('Servidor en linea en el puerto 3000')
			});

			3000 es el nombre del puerto por el que yo quiero que se levante mi aplicacion. Es el canal por donde se va a ejecutar  la aplicacion.

			El arrow function es una funcion flecha que se ejecuta cuando se ejecuta el metodo listen.


	Que viene en la peticion ? (56 min)

		La peticion es lo que viene del lado del cliente, cuando el cliente busca educacion it, va un pedido| peticion al servidor, cuando lo encuentra nos devuelve el elemento y nos imprime en la pantalla con lo que necesitamos.

			console.log('URL: ', peticion.url)  -- veo la ruta que pide el cliente.

		De la peticion mas adelante vamos a tomar los datos que envian de los formularios, porque van a estar dentro de la peticion enviados.



	FS - Como hago para leer index.html desde mi aplicacion (1:46 hs)

		Es el sistema de archivos de Node



		Para leer un archivo html lo hago de la siguiente manera:

		const fs = require('fs');

			fs.readFile('.\index.html', 'utf8', (err, data) => {
				if (err) throw err;
				respuesta.end(data);
			});

		Se puede usar if o switch para los diferentes paths	

	

************************************************************

Clase 34


	Repaso SASS ( 5 min a 26 min )


	DOM Avanzado (59 min)

		
		Local Storage (1:18 hs)

			Es la memoria local del navegador, tiene una capacidad limitada, vamos a guardar pocas cosas aca, como por ejemplo el tema(light o dark) de la pagina y algunos otros datos no sensibles.

			Guardamos datos en el localStorage:

				localStorage.setItem("email", email);

			Obtener un valor del localStorage:

				localStorage.getItem("email")


			Cerrar Sesion (1:40 hs)

				Borrar la memoria local de localStorage:

					localStorage.clear(); 



************************************************************

Clase 35


	Gemini ( 14:30 min )

		Uso Gemini de Google para crear objetos productos en JSON


	Uso el archivo data.js como una base de datos local



	cargarProductos.js ( 25 min a )



	Objeto Event - e (1:15 hs)



	Funcion anonima y arrow (1:24 hs)

		Las funciones anonimas y las arrow function se ejecutan automaticamente cuando le damos click al evento, NO LA INVOCAMOS PARA QUE SE EJECUTEN. SIEMPRE SE VAN A AUTOEJECUTAR CUANDO LO ESCRIBAMOS EN CUALQUIER PARTE, ya tienen una funcion de return por default asi que va a tirar el resultado cuando se ejecuten.



	Repaso addEventlistener (1:25 hs)

		Le agrego un evento a ese elemento.

	
	Limpiar campos Formulario desde JS ( 1:29 hs )

		1 forma -> Creo referencia al formulario por id desde js y luego uso la funcion predefinida reset()

		2 forma -> Creo funcion en la que a cada input.value le asigne un string vacio.



Continuamos DOM Avanzado 

	Nos metemos un poc mas en Administracion, manejo, gestion avanzada de JS:

		Obtenemos datos desde el archito HTML

		Creamos elementos

		Insertar elementos

		Darle estilos a los elementos

			Agregarle una clase

	Guardamos el aray de productos en el localStorage (1:31 hs)

		localStorage.setItem("productos", JSON.stringify(misProductos));

		JSON.stringify me vuelve a tipo texto el objeto	


	
	Creamos una funcion para cargar la tabla con los productos (1:45 hs)

		


************************************************************

Clase 36


	Agregarle clases a elementos desde JS (14:30 min)


	No puede agregar desde el boton de Listar Productos	(1:40 hs)

		Solucion: 

			Para no llamar a la funcion que imprime los productos (cargarTabla) en tabla en el evento del boton "Cargar" podemos pasarla al evento de Listar Productos y tenemos que tomar los datos desde el localStorage.


************************************************************

Clase 37


	Otra estrategia con button type submit (7 min)

		Creamos un nueov button con type submit y le ponemos un id al formulario.
		Capturamos le formulario en JS:

			let formulario = document.getElementById("miForm")

			formulario.addEventlistener('submit', (e) => {})

		En el HTML tengo que tener el boton con type submit:

			<button type="submit"> Otro Login <button>

		El submit sirve para envio de datos. (LO VAMOS A UTILIZAR EN BACKEND)

		En el ejercicio anterior le pusimos al boton con evento click para que haga lo que queriamos, PERO SI QUIERO ENVIAR DATOS DESDE EL FORMULARIO AL BACKEND LUEGO VOY A TENER QUE UTILIZAR SUBMIT. El evento lo tiene el formulario, osea que cuando envie los datos efectue la accion.



	Creando una pagina desde JS (37 min)

		let titulo = document.createElement("h1")

		titulo.innerHTML = "Ecommerce de Tecnologia"

		document.body.appendChild(titulo)


	appendChild (57 min)

		Inserta el elemento dentro del contenedor padre.


	Creamos titulo de pagina desde JS (50 min a 1:17 hs)

	Creamos la barra de Navegacion (1:20 hs a 1:47 hs)



************************************************************

Clase 38	

	Correccion TP 07 (15 min a FIN)


************************************************************

Clase 39

Explicacion TP 08 (2 min a 15 min)

Actividad con Kahoot (25 min a 45 min)

REACT (1:50 hs a 1:51:30 hs)

	React es un SPA, es una aplicacion de una sola pagina. Donde todo lo que vamos a hacer es escribir codigo JS y automaticamente React lo va ir subiendo a medida que lo vamos necesitando.


CREATE-REACT-APP (49 min a )

	Es una libreria que nos permite crear una aplicacion/template de React.

	Es una libreria que ya no se usa tal cual, porque se crearon nuevas formas para crear proyectos en React que luego veremos en el boot.

		Instalacion:

			* De forma Local y global con: npm install -g create-react-app

			* Instalar sin tener la libreria de forma local, otra diferencia es que npx me va a traer las dependendias que yo necesite con la ultima version.

	npm start (1:06:30 hs)

		Me arranca la aplicacion, me genera un pequeño template, un pequeño modelo estructurado que esta listo para usarse.


	Arquitectura de Aplicacion de React (1:30 hs)

		Los directorios nuevos que aparecen son Public y Source


			Public:

				manifest.json: es la configuracion de los iconos o de los logos (no nos sirve ahora)

				robots.txt: es una pequeña configuracion que si quiero que algunos robots de google lo permitan o no.

				index.html


			Source (src):

				Todo el codigo fuente que importa para que funcione esta pagina esta en la carpetita src.

				App.test.js (no me sirve ahora)

				setupTests.js (no me sirve ahora)

				reportWebVitals.js son reportes que hace Google para unas caracteristicas de mobile por ejemplo(no me sirve ahora)

				Index.js es el ARCHIVO PRINCIPAL

				App.js es otro ARCHIVO IMPORTANTE y aqui vemos el componente principal.



************************************************************

Clase 40			


		Repaso React clase anterior (3 min a 12 min)

			Todo en React son componentes (paginas, archivos), en vez de lanzar paginas vamos a lanzar componentes, un boton puede ser un componente. Por eso es una SPA.

			ya no vamos a crear paginas como productos.html sino que vamos a crear componentes y los vamos a ir renderizando y pasandoselas a React para que lo MUESTRE AL CLIENTE EN UNA SOLA PAGINA.

			El trabajo con React me ayuda a distribuir mejor las cosas y para no repetir codigo.

			No vamos a navegar entre paginas, vamos a navegar entre componentes.


		package.json (13 min a )

			en scripts:

				start: es el modo dev de nuestro proyecto

				build: construye la aplicacion

				test: es si queremos correr algun test

				eject: elimina, saca todo el funcionamiento nativo de React, lo pone en cero, a no se que queramos manipular los archivos de node modules porque si lo hacemos la pagina public se convierte en una pagina nativa, anulamos el trabajo que tiene por default React. 


			en SRC (16 min):


				Todos los archivos que creamos tienen que estar dentro de src, porque REACT TIENE UN FUNCIONAMIENTO ESTRUCTURADO DENTRO DE LOS NODE MODULES QUE TODO LO QUE NEECSITA RENDERIZAR Y TODO EL CODIGO FUENTE ESTA EN EL DIRECTORIO SRC. Si yo quiero cambiar esa arquitectura por default ahi si necesito ejecutar el script eject.

			
			React  no esta escrito en JS, sino en JSX que es una mezcla de JS con HTML


			LA APLICACION PRINCIPAL ES INDEX.JS (49:30 min)


			ReactDOM (50:30 min)

				Es el que memoriza la ultima aplicacion y lo guarda en el virtual DOM.

				El navegador cada vez que percibe un evento el navegador recarga la pagina, vuelve a pintar la pagina.

			Las librerias React y ReactDOM que se eimportan en index.js son el corazon de mi aplicacion.



			Sintaxis para para importar una imagen en React:

				import logo from './logo.svg';


			El componente principal es APP


	Componente de TIPO FUNCION (1:19 hs a )

	DETALLES A TENER EN CUENTA PARA TRABAJAR CON REACT:
			
		Es un componente funcional porque el componente esta hecho con una funcion.

		Tiene un metodo return y retorna UN SOLO ELEMENTO de JSX.

		En JSX no utilizamos class sino className.

		En los atributos de las etiquetas HTML para esilos se usa camelCase.

		Estoy obligado a cerrar todas de HTML en React (1:57 hs)


	Usamos Bootstrap en aplicacion React (1:33 hs)

		Los links de css y js de Bootstrap van en el index.html.

		Solo tenemos que recordar que tenemos que utilizar camelCase.


	Como CREAR COMPONENTES NUEVOS (1:40 hs a )

		Por convencion mi funcion tiene que tener el mismo nombre que mi componente.


	Creo COMPONENTE NAVEGACION (1:44 hs)

		Traigo componente navbar de Bootstrap.

		React solo devuelve un solo elemento por componente, ejemplo de mal uso:

		return(
			<nav>.. </nav>

			<main>..</main>
		)

		SI QUIERO DEVOLVER DOS COSAS, necesito usar una herramienta que me da React para que disimule que hay 2 elementos: React.Fragment, que es un componente padre que engloba como componentes hijos a un monton de cosas:

		return(
			<React.Fragment>

				<nav>.. </nav>

				<main>..</main>

				<footer>..</footer>

			<React.Fragment>
		)

	
		Necesitamos exportar el componente: "export default navegacion" 


		Como llamamos al componente desde App.js (2:05 hs)

			1º Tengo que importar el componente.
			2º Lo llamo como una etiqueta HTML: <Navegacion /> (tengo que dejar ese espacio para que se diferencie de los otros elementos como los div's).

			3º Agrego el React.Fragment.

		

************************************************************

Clase 41


	Pequeño repaso de los visto en la clase anterior (5 min a 20 min )

		Los componentes son simplemente funciones.

		El componente debe devolver un solo elemento JSX.

			Si tengo dos elementos y los quiero devolver en el return entonces tengo que usar React.Fragment, que tambien se puede usar con su atajo:

				<>
				....
				..
				</>

		
	React Router DOM ( 21 min a )

