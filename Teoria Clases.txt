Clase 2

¿Que puede ir dentro de la cabecera del documento <head>? (2 hs a )

Etiquetas de Encabezado (2:13 hs a 2:18 hs)


**********************************************************


Clase 3

Etiquetas semanticas

Son etiquetas que dividen la estructura de la pagina web en partes.

Elementos dentro del body (27 min a 35 min)
	header
		Titulos, barras de navegacion
	main
		Tiene el contenido principal
	footer
		Es el pie de pagina

Correcto uso de Encabezados (1:10 hs a 1:13 hs)

Uso de Rutas Relativas y Absolutas (2:03 hs)
	Atributo href=""
	Atributo target="_blank"
		No lo utilizo con rutas RELATIVAS
		La usamos con ABSOLUTAS
	Atributo target="_parent"
	Atributo target="_self"
	Atributo target="_top"
		Lo ultimos 3 se comportan igual.

	Atributo title=""
		Atributo de accesibilidad para personas con discapacidad visual.
	
	

************************************************************

Clase 4

Arquitectura y estructura de nuestra pagina web
Entendiendo las partes principales
Estructuramos lo que esta adentro del body


Ruteo interno en Rutas Relativas (14 min )

Busquedas optimizadas de Google (20 min)
	¿Por que es importante utilizar etiquetas semanticas?
		Por que google rankea de esa manera las paginas para sus busquedas.

Etiquetas <section> y <article> (26 min a 35 min)
	Estan dentro de la etiqueta <main>
	section es un bloque en el cual yo divido la informacion en diferente grupos tematicos.
	articles son los temas principales de algun area, son las divisiones de la informacion dentro del section.


Rutas Relativas usando id (38 min)

Ejemplo Proyecto Final (1:19 hs 1:30 hs)

Agregar IMAGENES con etiqueta <figure> y <figcaption>(1:34 hs)
	<img src="" alt="">
		Atributo alt (texto alternativo) es obligatorio para mejorar la accesibilidad.

	<figcaption> una pequeña nota/comentario de la imagen que estamos viendo.

Manejo con carpeta ASSETS (1:53 hs)
	Los assets son el lugar donde guardo todos esos que nosostros en algun momento queremos mostrar.

Arquitectura
	la forma en que estructuro los directorios.


************************************************************

Clase 5

Repaso clase anterior (0 min a 20 min)

Listas Ordenadas (23 min & 51 min)

Etiquetas de BLOQUE y LINEA (32 min)

Etiqueta <address>
	Va en footer
	
	Bloque: ocupan el 100% del ancho del dispositivo en donde se esta mostrando la aplicacion.

Etiqueta <iframe> 
	Incrusto una ventana de otra pagina en nuestro sitio
	Lo usamos para mostrar mapas
	Esta gernealmente en el footer

Agrega mapa

Agregar video 

Agregar audio

Etiqueta correo electronico y telefono (2 hs)
	Se usa en el Footer generalmente
	Se usa con un ancla con atributo href="mailto:hola@udesa"
	Para telefono se usa ancla con atributo href="tel:"



************************************************************

Clase 6

Realización de examen Alumni (2:30 min)

Estilos con CSS (13 min)

	Tenemos 3 formas de trabajar con css
		Estilos en linea
		Estilos en bloque (23 min)
		Estilos en el head (34 min)
		Etilos Externos (38 min)

	
	Configuracion de usuario en Git bash (1:20 hs)
			Para que vscode reconozca quien soy.
	Un poco de Chrome Dev Tools (21 min)

	COMO CONFIGURAR PERFIL EN VSCODE PARA SIEMPRE TENER TUS EXTENSIONES (1:37 HS)
	Git lens en VSCODE (1:38 hs)
	Github pull Request
	Iniciar sesion en VSCODE


************************************************************

Clase 7


¿QUE ES EL ROOT ? (12 min)
	Es la raiz principal del proyecto o de la aplicacion.

Diferencias entre <strong> y <b> Accesibilidad (16 min)

Repositorio LOCAL GIT (40 min)

Repositorio REMOTO GitHUb (1:39 hs)

************************************************************

Clase 8

Continuamos con Git (24 min)

	git status
	git no guarda directorios vacios
	git remote -v
	git log


ID (1:07 hs)


CLASES (1:08:30 hs a 1:34 hs)


Concepto Caja (2:05 hs)
	Margin, border, padding 


************************************************************

Clase 9


Paleta de colores Adobe (10 min)

Formas de representar un color (26 min)
	Por rgb
	Por nombre
	Por Hexadecimal

Selectores anidados o Padres a hijos (45 min)

Tipografias (54 min)
	font-size (16px por default)
	font-family
		¿que pasa si el usuario no tiene estas tipografias en su computadora?
	Para no tener que depender del font-family podes:

	1° puedo descargar una tipografia y agregarla a mi proyecto (USO DE TIPOGRAFIA LOCAL)
	2° lINKEAR o importarla ()

1) como hago para configurar nuestra tipografia con el codigo descargado
	
	a)@font-face{ (configuro donde esta la fuente que descargue)
	b) creo la regla y le asigno le nombre de la fuente


2a) linkear de Google fonts en el html y en el css lo llamamos

2b) Importarlo directamente desde el css (1:49 hs)
	a) poner en el css el @import url('')

Se puede usar mezclado 1 y 2.


GIT - continuacion (2:00 hs)

.gitignore
	
	index.html
	.css
	/css o css/
	*.pdf -> no me subas todos los pdf


************************************************************

Clase 10



Para que sirven los DIV's ? (17 min)


Repaso Font-family descarga o linkeo (30 min)
	google Fonts


Concepto de Caja (54 min)

	Margin (1:00 hs) - separacion entre etiquetas
	Border (1:08 hs) - 
	Padding (1:16 hs) - es el relleno interno



Live Share (1:35 hs)
	Compartir Visual Studio Code (pair programming)
	Herramienta para trabajar en EQUIPO

	requerimientos:
	Estar logueado con usuario en github



Git - .gikeep (2:05 hs)


************************************************************

Clase 11


GIT (25:30 min)

	Agregar COLABORADORES dentro de nuestro Proyecto
		Esto lo hace el que tiene el repo principal:
		Settings -> Collaborators -> Add people

	git pull - busca su hay cambios en el repo remoto y si hay los descarga y me los guarda. Si el pull encuentra diferencias te deja decidir si hay cambios sobre una misma.
 
	A veces aunque hiciste git pull al inicio tenes que hacer de nuevo antes de git push luego de varias horas de codeo. 	

	git clone - es crear una copia exacta del repo remoto con logs y todo


Es recomendable trabajar con imagenes PNG y SVG (1:28 hs)
	Son los mas flexibles y ligeros

Ancla con imagen adentro (1:47 hs)

Background image (1:49 hs)

	
************************************************************

Clase 12


Sketch Web / wireframe (17 min)

	Sketch Es un pequeño diseño a mano alzada donde le muestro al cliente o el me pide como seria la pagina (es un borrador)

	
	Wireframe es algo digital


Herramientas de Diseño (24 min)

	Figma

	Balsamiq (25:30 min)

	invisionapp (28 min)

	Canva (29 min)


Examen 2 Alumni (36 min)


Subir ICONO a mi pestaña (47:30 min)

	Convertir de PNG a ICO en cualquier app online



	text-decoration: none

	Las imagenes vectoriales se acomodan mas facilmtente a los contenedores, no necesito usar muchas media querys



Formularios (1:13 hs)

	Atributo action - representa el archivo o el lugar a donde yo voy a estar enviando todos los datos que cargue dentro del formulario (para enviarlo en algun momento a una base de datos) 	

	Atribuo method - es la forma en la que se envia la informacion

	Metodo post - envio de datos a traves del http con navegadores o servidores. Va oculto a la vista del usuario.

	Metodo get - no es recomendado utilizarlo porque va a la vista del usuario.

	label (ELEMENTO DE LINEA) - etiqueta informativa sobre el campo a llenar por el usuario

		Atributo For va vinculada al id del input

	input (ELEMENTO DE LINEA) - es el unico lugar donde el usuario puede introducir dato en una pagina web.

		type="text"

		type="email"

		type="number"

	
	Atributo required - hago que un campo sea obligatorio de llenar.

	Atributo placeholder="juan perez" - es un ejemplo de un valor escrito dentro del atributo para el cliente.


	Button

		type="submit" - para que el boton haga algo le tengo que pedir que haga algo.

		type="reset" - borra los datos ingresados en los inputs que estan el formulario.

	
	Revision de los metodos HTTP (1:30 hs)


	Elemento select con atributo id vinculado con for de label (1:59 hs)

		elemento optgroup donde voy cargando los datos que quiero que se muestren



************************************************************

Clase 13


git clone (28 min)

GithubPages (41:30 min)

Es solo para Frontend

	Voy a Settings 
	Voy a Pages
	Deploy from a branch (seleccionamos la rama en la que hacemos deploy)
	en Branch elijo Master y doy a Save


000WebHost (1:20 hs - a:54 hs)

	Es un servidor profesional (parecido a Github pages) donde nosotros podemos ingresar y podemos manejar y administrar nuestro servidor.

	Solo sirve para Frontend para nosotros, porque maneja backend con PHP y nosotros vamos a utilizar backend con NODE JS para lo cual vamos a utilizar servidores AWS, Railway o algun otro que sirva con Node JS.

	000Webhost te da un hosting gratuito para un dominio por un año.


	iniciar sesion
	Elegir "Subir sitio"
	En "public_html" subo mis proyectos web
	Nunca borrar archivos en carpetas "public_html" y "tmp"

	Con este tema cerramos el modulo 4



	Intro JS (1:57 hs)

	// - Comentarios de una sola linea en JS 

	/* */ - Comentarios de varias lineas en JS

	Variables (2:03 hs)

		Es un espacio de memoria para almacenar datos.

		Como inicializamos una variable en JS:

			Con palabras reservadas:

				"var" nombre 



************************************************************

Clase 14

 
Continuacion JS

		Uso consola de Chrome (17 min)
			Variables

		Formas INCORRECTAS de nombrar una variable (30 min)

		VAR, LET y CONST (38:30 min)

		var se creo con JS

		let y const se creo con una actualizacion de JS

		CONST - se escriben en mayuscula (por ej. DNI)

		CONST - cuando la creamos tenemos que definirla  (const DNI = 92925103)

		VAR y LET - NO es obligatorio asignarles un valor(o inicializar) cuando la declaras.

		
		Tipos de Errores: 
			
					de Sintaxis 	
					de Compilacion ( salta cuando se ejecuta el codigo)
					Logicos (multiplicar un string con un numero)
						Los errores de compilacion/ejecucion y logicos se ven cuando se ejecuta el software.


		Concatenacion de Variables (nombre + apellido)


		Funciones por Defecto/nativas:

					console.log() - Imprime en la consola

		
		Isamiento de la variable (1:05 hs)

			Pasa con VAR
					 
					
	Vinculacion de archivo JS con HTML (1:11 hs)

	funcion alert()

	Operadores Matematicos (1:41:30 hs)



************************************************************

Clase 15


Instalación Node JS (10 min a 46 min)



Que es NPM (49 min)

	Es el Administrador de paquetes de Node.
	
	instala, actualiza o elimina herramientas que son as librerías al núcleo de NODE JS


	Que son las LIBRERIAS ? -> Son código JavaScript que tienen una tarea especifica que realizar.



Nodemon (56 min)

	Mantiene la ejecución del código abierta.

	Corto Nodemon:
		cierro la terminal
		Ctrl + C

	Nodemon solo funciona con codigo JS nativo, por ejemplo la funcion alert, prompt no funcionan porque es una funcion de ventana.

	SIEMPRE VA FUNCIONAR NODEMON CUANDO NO TENGAMOS QUE UTILIZAR FUNCIONES QUE NECESITAN VENTANAS DE NAVEGADOR.



Error Terminal PowerShell con Nodemon hecho con Willi (1:20 hs a 1:26 hs)

	Ejecutar Powershell como Administrador
	Ejecutar Policy para cambiar restringido a RemoteDesigned


Operadores (1:33:30 hs)

	Suma, resta,....
	modulo


PROMPT (1:40 hs)

	Es una funcion que permite que el usuario ingrese un valor


CONFIRM (1:54 hs)

	
************************************************************

Clase 16


Operadores Relacionales (36 min)

	>, <, ==, !=, >=, <=, ===

	=== (es identico en valor, tipo de dato, es un clon)



Condicionales (52 min)

	Son pequeñas estructuras de codigo que me dan la posibilidad de elegir cosas (if)

	NO ESTA CLASE: averiguar truthly / falsy 

	IF anidados (1:12:30 hs)

	IF anidados con operadores logicos (1:16 hs)

		&& || !


Uso de objeto window (1:54:30 hs)

	Imprimimos por consola el objeto window

	window es un objeto global, el objeto de la ventana, que tiene todos lo metodos, todos los datos del navegador, todos lo elementos html, todo css, todo js.

	window.location (traslada al usuario a algun otro lugar de mi aplicacion)


************************************************************

Clase 17

Examen Alumni (0 a 13 min)

Ramas en Git (18 min a )
		
	Una rama es una forma de tener diferentes versiones de mi proyecto guardados en un solo proyecto.

	git branch: me lista cuales son las ramas que tiene mi proyecto. Me muestra con un asterisco en que rama estoy parado.

	git branch nombreRama: crea una nueva rama.

	git checkout nombreRama: cambiar a otra rama.


	git merge nombreRamaOtraVersion: es una fusion, unir el proyecto a la rama principal.

		Yo necesito estar parado siempre en la rama a la que quiero aplicarle los cambios de otra rama.

	git push origin nombreRamaVersion: subo a git las otra rama.

	¿Se puede revertir la fusion?
		Si se puede, no dijo como.

	Conflictos al hacer fusion (1:18 hs)

	git remove || git reset || git revert

	git branch -D nombreRama: elimina una rama en la que no estoy parado.

	

	git log --oneline: me muestra los commits en una sola linea (resumida)


	git checkout hashCommit: vuelvo al estado anterior en ese hash commit (no crea rama, solo vuelvo para ver).

	git switch -c hashCommit: me lleva al estado de ese commit y me crea la rama.


Display (1:47:30 hs)

	Distribucion de elementos

	FLOAT



************************************************************

Clase 18


Nodemon es para backend, no funcionaria con el navegador.

Repaso Ramas (9 min a )


	Eliminar una RAMA en el repositorio Remoto (16 min)
		
		Como hago para eliminar de Github la rama que ya habia eliminado de mi proyecto local.

			git push origin -d ramas