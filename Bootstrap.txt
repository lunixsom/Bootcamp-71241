Clase 1

TEORIA:

Explicacion de temario curso ( 0 min a  )

    El objetivo del curso es llegar a tener un sitio maquetado utilizando Bootstrap, si tienen conocimientos en Javascript avanzado, le podrian dar vida a la aplicacion utilizando JS y consumiendo datos de un servidor.

    Ahora si fueron mas alla y vieron React ya directamente pueden pedir tambien los datos como en JS avanzado pero utilizando esa libreria o framework y sumandole el maquetado, teniendo una aplicacion completa.


Hay un limite para resolver los problemas de diseño (37 min)

    En el caso de diseño consideramos que el limite inferior relevante son 320px, que es el celular de gama baja en el cual a nosotros nos interesa hacer algo, mas abajo de 320px no tiene sentido y de ahi para arriba seran los diseños que nosotros tenemos ue resolver.



Diseño Elastico o fluido (39 min)

    Es la forma por defecto en la que yo no hice nada, si bien yo no aplique anchos sino que se aplican por default anchos como por porcentajes como width: 100% por ejemplo, por ser elemento de bloque.

    El problema con este diseño es que en dispositivos muy grandes lo que termina pasando es que molesta la lectura de textos, puede pasar tambien que las imagenes queden muy grandes.


    Caso con imagenes

            Como no es un elemento inline no ocupa todo el ancho de su contenedor o si es muy grande la imagen se hace desbordamiento (overflow), entonces para controlar eso puedo ponerle un width: 100% de manera que la imagen va a medir lo que mida su contenedor.


    DOM (46 min)

        Es el modelo de objetos del documento, el arbol en orden de los elementos html.

    
    CSSOM (48 min)

        Es el modelo de objetos de css, me muestra las propiedades css que le asigne a los elementos.

    
    Arbol de renderizado / Render Tree (48:40 min)

        Es la mezcla del DOM y el CSSOM.


    Para realizar pruebas de testeo de cuanto cuesta el renderizado de un sitio en un celular el mejor caso es con un celular de gama media y con conectividad 3G que son le promedio en argentina, de esta manera podemos probar masomenos como se comportaria nuestro sitio en el comun del mercado. 
    
    Con esto nos damos una idea si nuestro sitio va bien, es muy lento o lo que fuese, entonces cuando nosotros empezamos a trabajar con celulares de gama media ahi empezamos a ver el tiempo que tarda en armar todo el procesado del armado del dom, el muestreo de la informacion dentro de la pantalla y la reaccion con respecto a JS.

    Con las imagenes al trabajar con velodicades de 3G nos vamos a dar cuenta que el sitio se carga quizas medianamente rapido pero las imagenes tardan un monton en aparecer y eso puede estar pasando porque estamos cargando en mobile imagenes que son mas apropiadas para escritorio, ejemplo:

                Cargo una imagen de 1268x664 en un celular y esa imagen puede pesar 1 mega y esto bajarlo en 3g puede llevar su tiempo.
                La idea seria optimizar estos recursos para que la carga sea mas rapida.

     
    Antes se diseñaba un sitio dependiendo del navegador

    Vamos a ver como funciona una GRILLA en General: (59 min)

    Lo que revoluciono el mercado, lo que nos permitio empezar a desarrollar de otra manera fue el concepto de una GRILLA. La grilla me resuelve problemas del responsive.

    La GRILLA con la que mas se trabaja es con la de 12 columnas. El espacio entre cada columna se llama calle o butter.

    Responsive web design: nos dice que nosotros tenemos un solo html, el maquetado, la estructura semantica del sitio es una sola y lo que hacemos con CSS es mostrar esa informacion de manera distinta si entro con celular, escritorio, etc.. con las media queries el ancho del dispositivo es lo que nos va decir como vamos a mostrar el sitio.



    Hacer un sitio Responsive para celulares (1:18 hs)

    El sitio de escritorio teniamos que mostrarlo para dispositivos mas chicos y lo que habia que evitar era el scroll horizontal.

    El SCROLL HORIZONTAL en un diseño esta mal. No hay ningun problema que la pagina se muy extensa en lo vertical.
    Entonces teniamos que evitar eso, teniamos que de alguna manera distribuir todo el contenido de forma tal de que no generara SCROLL HORIZONTAL.

    Una primera solucion fue que los elementos en pantallas mobile se caigan, osea todos los elementos que nosotros teniamos de manera horizontal se iban a terminar viendo de manera vertical. (con float y width en px)
    Tambien se solia esconder informacion con la propiedad display: none para que nos quede mejor el diseño.
    Termino pasando que en el afan de que los sitios se vean lindos en dispositivos mas chicos y suprimiamos algun que otro contenido a veces se suprimia el contenido fundamental

    Esto primero llevo a mobile first que es que primero vamos a resolver el diseño para mobile y luego ese diseño lo agrandamos, pero se continuo teniendo problemas con la falta de informacion relevante por tema de primar el diseño al contenido.

    Entonces surgio el concepto CONTENT FIRST que es el que se utiliza acutalmente.

    El equipo de UX lo que hace es definir no solamente el diseño sino que información hay que mostrar.

    Una manera de trabajar que te pueden marcar al entregar el diseño es el de pixel perfect que significa que maquetes tal cual con las mismas medidas del diseño entregado sin importar si los elementos no coinciden con las grillas por lo cual deba usar posicionamineto.
    
    
    Al final estos dos conceptos de Mobile First y Content First aplican a UX no a los desarrolladores, porque a mi me es indistinto por cual arranco mobile o escritorio porque el html va a ser el mismo, donde si cambiaria un poco el codigo seria en css porque si hacemos la idea de mobile first basicamente el codigo por defecto seria para mobile y el codigo puntual seria para escritorio, entonces al final seria lo mismo empezar por mobile o escritorio ya que al final tenemos que hacer el diseño que nos pasaron para ambos.

    El Maquetado es la estructura semantica mas el css.

    Los elementos div y span no aportan semantica, los dos son contenedores genericos con la diferencia que uno es contenedor de linea (span) solamente contiene palabras y el div es un contenedor de bloque generalmente es para contener estructuras.

    DIFERENCIA entre CONTENT-BOX y BORDER-BOX (2:16 hs)

    Cuando nosotros establecemos un width, es el width del content box, la caja de contenido, entonces cuando nosotros tenemos dos elementos con width uno de 20% y el otro de 80% y le agregamos un padding este se va sumar a lo que establcimos como width entonces como los dos elementos suman el 100% al ponerle el padding se van a exceder necesariamente los elementos no entran por lo cual se caen.

    Para resolver esto una posibilidad es utilizar el box-sizing: border box que lo que hace es me permite decirle al navegador a partir de donde se va calcular el tamaño, entonces yo le voy a decir que ese width que estableci de 20% y 80% incluye al padding o a border, de esta manera los elementos no se caen porque uno mide 20% incluyendo al padding y el otro mide 80% incluyendo al padding. 

    Jonathan Mastropasqua no esta muy de acuerdo de ponerle box-sizing: border-box al selector universal * para que se aplique a todos los elementos, la realidad es que esto de ponerle un tamaño y box-sizing porque le vamos a poner padding lo va resolver mi grilla que me va a dar un concepto que es una columna que va a tener un ancho porcentual va a tener un padding aplicado y va a tener el box-sizing: border-box entonces probablemente voy a tener que usarlo en contadas ocasiones box-sizing cuando a mi se me de la necesidad de a algo ponerle un determinado tamaño y eso que contemple el padding y el borde.